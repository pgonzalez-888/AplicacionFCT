/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Empresa;
import org.openapitools.client.model.RegistroPractica;
import org.openapitools.client.model.Tutor;
import org.openapitools.client.model.Usuario;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Alumno
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-02T23:55:13.883603200+01:00[Europe/Madrid]", comments = "Generator version: 7.11.0")
public class Alumno {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private Long id;

  public static final String SERIALIZED_NAME_NOMBRE_COMPLETO = "nombreCompleto";
  @SerializedName(SERIALIZED_NAME_NOMBRE_COMPLETO)
  @javax.annotation.Nullable
  private String nombreCompleto;

  public static final String SERIALIZED_NAME_ACTIVO = "activo";
  @SerializedName(SERIALIZED_NAME_ACTIVO)
  @javax.annotation.Nullable
  private Boolean activo;

  public static final String SERIALIZED_NAME_CICLO = "ciclo";
  @SerializedName(SERIALIZED_NAME_CICLO)
  @javax.annotation.Nullable
  private String ciclo;

  public static final String SERIALIZED_NAME_EVALUACION = "evaluacion";
  @SerializedName(SERIALIZED_NAME_EVALUACION)
  @javax.annotation.Nullable
  private String evaluacion;

  public static final String SERIALIZED_NAME_ANIO_CURSO = "anioCurso";
  @SerializedName(SERIALIZED_NAME_ANIO_CURSO)
  @javax.annotation.Nullable
  private Integer anioCurso;

  public static final String SERIALIZED_NAME_TUTOR_DOCENTE = "tutorDocente";
  @SerializedName(SERIALIZED_NAME_TUTOR_DOCENTE)
  @javax.annotation.Nullable
  private Tutor tutorDocente;

  public static final String SERIALIZED_NAME_EMPRESA = "empresa";
  @SerializedName(SERIALIZED_NAME_EMPRESA)
  @javax.annotation.Nullable
  private Empresa empresa;

  public static final String SERIALIZED_NAME_USUARIO = "usuario";
  @SerializedName(SERIALIZED_NAME_USUARIO)
  @javax.annotation.Nullable
  private Usuario usuario;

  public static final String SERIALIZED_NAME_REGISTROS_PRACTICA = "registrosPractica";
  @SerializedName(SERIALIZED_NAME_REGISTROS_PRACTICA)
  @javax.annotation.Nullable
  private List<RegistroPractica> registrosPractica = new ArrayList<>();

  public Alumno() {
  }

  public Alumno id(@javax.annotation.Nullable Long id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Long getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable Long id) {
    this.id = id;
  }


  public Alumno nombreCompleto(@javax.annotation.Nullable String nombreCompleto) {
    this.nombreCompleto = nombreCompleto;
    return this;
  }

  /**
   * Get nombreCompleto
   * @return nombreCompleto
   */
  @javax.annotation.Nullable
  public String getNombreCompleto() {
    return nombreCompleto;
  }

  public void setNombreCompleto(@javax.annotation.Nullable String nombreCompleto) {
    this.nombreCompleto = nombreCompleto;
  }


  public Alumno activo(@javax.annotation.Nullable Boolean activo) {
    this.activo = activo;
    return this;
  }

  /**
   * Get activo
   * @return activo
   */
  @javax.annotation.Nullable
  public Boolean getActivo() {
    return activo;
  }

  public void setActivo(@javax.annotation.Nullable Boolean activo) {
    this.activo = activo;
  }


  public Alumno ciclo(@javax.annotation.Nullable String ciclo) {
    this.ciclo = ciclo;
    return this;
  }

  /**
   * Get ciclo
   * @return ciclo
   */
  @javax.annotation.Nullable
  public String getCiclo() {
    return ciclo;
  }

  public void setCiclo(@javax.annotation.Nullable String ciclo) {
    this.ciclo = ciclo;
  }


  public Alumno evaluacion(@javax.annotation.Nullable String evaluacion) {
    this.evaluacion = evaluacion;
    return this;
  }

  /**
   * Get evaluacion
   * @return evaluacion
   */
  @javax.annotation.Nullable
  public String getEvaluacion() {
    return evaluacion;
  }

  public void setEvaluacion(@javax.annotation.Nullable String evaluacion) {
    this.evaluacion = evaluacion;
  }


  public Alumno anioCurso(@javax.annotation.Nullable Integer anioCurso) {
    this.anioCurso = anioCurso;
    return this;
  }

  /**
   * Get anioCurso
   * @return anioCurso
   */
  @javax.annotation.Nullable
  public Integer getAnioCurso() {
    return anioCurso;
  }

  public void setAnioCurso(@javax.annotation.Nullable Integer anioCurso) {
    this.anioCurso = anioCurso;
  }


  public Alumno tutorDocente(@javax.annotation.Nullable Tutor tutorDocente) {
    this.tutorDocente = tutorDocente;
    return this;
  }

  /**
   * Get tutorDocente
   * @return tutorDocente
   */
  @javax.annotation.Nullable
  public Tutor getTutorDocente() {
    return tutorDocente;
  }

  public void setTutorDocente(@javax.annotation.Nullable Tutor tutorDocente) {
    this.tutorDocente = tutorDocente;
  }


  public Alumno empresa(@javax.annotation.Nullable Empresa empresa) {
    this.empresa = empresa;
    return this;
  }

  /**
   * Get empresa
   * @return empresa
   */
  @javax.annotation.Nullable
  public Empresa getEmpresa() {
    return empresa;
  }

  public void setEmpresa(@javax.annotation.Nullable Empresa empresa) {
    this.empresa = empresa;
  }


  public Alumno usuario(@javax.annotation.Nullable Usuario usuario) {
    this.usuario = usuario;
    return this;
  }

  /**
   * Get usuario
   * @return usuario
   */
  @javax.annotation.Nullable
  public Usuario getUsuario() {
    return usuario;
  }

  public void setUsuario(@javax.annotation.Nullable Usuario usuario) {
    this.usuario = usuario;
  }


  public Alumno registrosPractica(@javax.annotation.Nullable List<RegistroPractica> registrosPractica) {
    this.registrosPractica = registrosPractica;
    return this;
  }

  public Alumno addRegistrosPracticaItem(RegistroPractica registrosPracticaItem) {
    if (this.registrosPractica == null) {
      this.registrosPractica = new ArrayList<>();
    }
    this.registrosPractica.add(registrosPracticaItem);
    return this;
  }

  /**
   * Get registrosPractica
   * @return registrosPractica
   */
  @javax.annotation.Nullable
  public List<RegistroPractica> getRegistrosPractica() {
    return registrosPractica;
  }

  public void setRegistrosPractica(@javax.annotation.Nullable List<RegistroPractica> registrosPractica) {
    this.registrosPractica = registrosPractica;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Alumno alumno = (Alumno) o;
    return Objects.equals(this.id, alumno.id) &&
        Objects.equals(this.nombreCompleto, alumno.nombreCompleto) &&
        Objects.equals(this.activo, alumno.activo) &&
        Objects.equals(this.ciclo, alumno.ciclo) &&
        Objects.equals(this.evaluacion, alumno.evaluacion) &&
        Objects.equals(this.anioCurso, alumno.anioCurso) &&
        Objects.equals(this.tutorDocente, alumno.tutorDocente) &&
        Objects.equals(this.empresa, alumno.empresa) &&
        Objects.equals(this.usuario, alumno.usuario) &&
        Objects.equals(this.registrosPractica, alumno.registrosPractica);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, nombreCompleto, activo, ciclo, evaluacion, anioCurso, tutorDocente, empresa, usuario, registrosPractica);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Alumno {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    nombreCompleto: ").append(toIndentedString(nombreCompleto)).append("\n");
    sb.append("    activo: ").append(toIndentedString(activo)).append("\n");
    sb.append("    ciclo: ").append(toIndentedString(ciclo)).append("\n");
    sb.append("    evaluacion: ").append(toIndentedString(evaluacion)).append("\n");
    sb.append("    anioCurso: ").append(toIndentedString(anioCurso)).append("\n");
    sb.append("    tutorDocente: ").append(toIndentedString(tutorDocente)).append("\n");
    sb.append("    empresa: ").append(toIndentedString(empresa)).append("\n");
    sb.append("    usuario: ").append(toIndentedString(usuario)).append("\n");
    sb.append("    registrosPractica: ").append(toIndentedString(registrosPractica)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("nombreCompleto");
    openapiFields.add("activo");
    openapiFields.add("ciclo");
    openapiFields.add("evaluacion");
    openapiFields.add("anioCurso");
    openapiFields.add("tutorDocente");
    openapiFields.add("empresa");
    openapiFields.add("usuario");
    openapiFields.add("registrosPractica");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Alumno
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Alumno.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Alumno is not found in the empty JSON string", Alumno.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Alumno.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Alumno` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("nombreCompleto") != null && !jsonObj.get("nombreCompleto").isJsonNull()) && !jsonObj.get("nombreCompleto").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nombreCompleto` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nombreCompleto").toString()));
      }
      if ((jsonObj.get("ciclo") != null && !jsonObj.get("ciclo").isJsonNull()) && !jsonObj.get("ciclo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ciclo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ciclo").toString()));
      }
      if ((jsonObj.get("evaluacion") != null && !jsonObj.get("evaluacion").isJsonNull()) && !jsonObj.get("evaluacion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `evaluacion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("evaluacion").toString()));
      }
      // validate the optional field `tutorDocente`
      if (jsonObj.get("tutorDocente") != null && !jsonObj.get("tutorDocente").isJsonNull()) {
        Tutor.validateJsonElement(jsonObj.get("tutorDocente"));
      }
      // validate the optional field `empresa`
      if (jsonObj.get("empresa") != null && !jsonObj.get("empresa").isJsonNull()) {
        Empresa.validateJsonElement(jsonObj.get("empresa"));
      }
      // validate the optional field `usuario`
      if (jsonObj.get("usuario") != null && !jsonObj.get("usuario").isJsonNull()) {
        Usuario.validateJsonElement(jsonObj.get("usuario"));
      }
      if (jsonObj.get("registrosPractica") != null && !jsonObj.get("registrosPractica").isJsonNull()) {
        JsonArray jsonArrayregistrosPractica = jsonObj.getAsJsonArray("registrosPractica");
        if (jsonArrayregistrosPractica != null) {
          // ensure the json data is an array
          if (!jsonObj.get("registrosPractica").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `registrosPractica` to be an array in the JSON string but got `%s`", jsonObj.get("registrosPractica").toString()));
          }

          // validate the optional field `registrosPractica` (array)
          for (int i = 0; i < jsonArrayregistrosPractica.size(); i++) {
            RegistroPractica.validateJsonElement(jsonArrayregistrosPractica.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Alumno.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Alumno' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Alumno> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Alumno.class));

       return (TypeAdapter<T>) new TypeAdapter<Alumno>() {
           @Override
           public void write(JsonWriter out, Alumno value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Alumno read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Alumno given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Alumno
   * @throws IOException if the JSON string is invalid with respect to Alumno
   */
  public static Alumno fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Alumno.class);
  }

  /**
   * Convert an instance of Alumno to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

