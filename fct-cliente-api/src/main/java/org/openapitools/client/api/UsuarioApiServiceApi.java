/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.LocalDate;
import org.openapitools.client.model.RegistroPractica;
import org.openapitools.client.model.Usuario;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UsuarioApiServiceApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UsuarioApiServiceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UsuarioApiServiceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for altaRegistroPractica
     * @param id  (required)
     * @param fechaId  (required)
     * @param horas  (required)
     * @param detalle  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call altaRegistroPracticaCall(Long id, Long fechaId, Integer horas, String detalle, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/usuarios/altaPractica/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fechaId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fechaId", fechaId));
        }

        if (horas != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("horas", horas));
        }

        if (detalle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("detalle", detalle));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call altaRegistroPracticaValidateBeforeCall(Long id, Long fechaId, Integer horas, String detalle, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling altaRegistroPractica(Async)");
        }

        // verify the required parameter 'fechaId' is set
        if (fechaId == null) {
            throw new ApiException("Missing the required parameter 'fechaId' when calling altaRegistroPractica(Async)");
        }

        // verify the required parameter 'horas' is set
        if (horas == null) {
            throw new ApiException("Missing the required parameter 'horas' when calling altaRegistroPractica(Async)");
        }

        // verify the required parameter 'detalle' is set
        if (detalle == null) {
            throw new ApiException("Missing the required parameter 'detalle' when calling altaRegistroPractica(Async)");
        }

        return altaRegistroPracticaCall(id, fechaId, horas, detalle, _callback);

    }

    /**
     * Registro alta de los usuarios al incorporarse a las prácticas
     * Registro alta usuarios
     * @param id  (required)
     * @param fechaId  (required)
     * @param horas  (required)
     * @param detalle  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void altaRegistroPractica(Long id, Long fechaId, Integer horas, String detalle) throws ApiException {
        altaRegistroPracticaWithHttpInfo(id, fechaId, horas, detalle);
    }

    /**
     * Registro alta de los usuarios al incorporarse a las prácticas
     * Registro alta usuarios
     * @param id  (required)
     * @param fechaId  (required)
     * @param horas  (required)
     * @param detalle  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> altaRegistroPracticaWithHttpInfo(Long id, Long fechaId, Integer horas, String detalle) throws ApiException {
        okhttp3.Call localVarCall = altaRegistroPracticaValidateBeforeCall(id, fechaId, horas, detalle, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Registro alta de los usuarios al incorporarse a las prácticas (asynchronously)
     * Registro alta usuarios
     * @param id  (required)
     * @param fechaId  (required)
     * @param horas  (required)
     * @param detalle  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call altaRegistroPracticaAsync(Long id, Long fechaId, Integer horas, String detalle, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = altaRegistroPracticaValidateBeforeCall(id, fechaId, horas, detalle, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for borrarRegistroPractica
     * @param id  (required)
     * @param registroId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call borrarRegistroPracticaCall(Long id, Long registroId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/usuarios/borrarRegistro/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (registroId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("registroId", registroId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call borrarRegistroPracticaValidateBeforeCall(Long id, Long registroId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling borrarRegistroPractica(Async)");
        }

        // verify the required parameter 'registroId' is set
        if (registroId == null) {
            throw new ApiException("Missing the required parameter 'registroId' when calling borrarRegistroPractica(Async)");
        }

        return borrarRegistroPracticaCall(id, registroId, _callback);

    }

    /**
     * Borrar registro alumno
     * Borrar registro
     * @param id  (required)
     * @param registroId  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void borrarRegistroPractica(Long id, Long registroId) throws ApiException {
        borrarRegistroPracticaWithHttpInfo(id, registroId);
    }

    /**
     * Borrar registro alumno
     * Borrar registro
     * @param id  (required)
     * @param registroId  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> borrarRegistroPracticaWithHttpInfo(Long id, Long registroId) throws ApiException {
        okhttp3.Call localVarCall = borrarRegistroPracticaValidateBeforeCall(id, registroId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Borrar registro alumno (asynchronously)
     * Borrar registro
     * @param id  (required)
     * @param registroId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call borrarRegistroPracticaAsync(Long id, Long registroId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = borrarRegistroPracticaValidateBeforeCall(id, registroId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for cambiarContrasena
     * @param id  (required)
     * @param antiguaContrasena  (required)
     * @param nuevaContrasena  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cambiarContrasenaCall(Long id, String antiguaContrasena, String nuevaContrasena, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/usuarios/password/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (antiguaContrasena != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("antiguaContrasena", antiguaContrasena));
        }

        if (nuevaContrasena != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nuevaContrasena", nuevaContrasena));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cambiarContrasenaValidateBeforeCall(Long id, String antiguaContrasena, String nuevaContrasena, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling cambiarContrasena(Async)");
        }

        // verify the required parameter 'antiguaContrasena' is set
        if (antiguaContrasena == null) {
            throw new ApiException("Missing the required parameter 'antiguaContrasena' when calling cambiarContrasena(Async)");
        }

        // verify the required parameter 'nuevaContrasena' is set
        if (nuevaContrasena == null) {
            throw new ApiException("Missing the required parameter 'nuevaContrasena' when calling cambiarContrasena(Async)");
        }

        return cambiarContrasenaCall(id, antiguaContrasena, nuevaContrasena, _callback);

    }

    /**
     * Cambiar contraseña de usuarios
     * Cambiar contraseña a un usuario
     * @param id  (required)
     * @param antiguaContrasena  (required)
     * @param nuevaContrasena  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void cambiarContrasena(Long id, String antiguaContrasena, String nuevaContrasena) throws ApiException {
        cambiarContrasenaWithHttpInfo(id, antiguaContrasena, nuevaContrasena);
    }

    /**
     * Cambiar contraseña de usuarios
     * Cambiar contraseña a un usuario
     * @param id  (required)
     * @param antiguaContrasena  (required)
     * @param nuevaContrasena  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> cambiarContrasenaWithHttpInfo(Long id, String antiguaContrasena, String nuevaContrasena) throws ApiException {
        okhttp3.Call localVarCall = cambiarContrasenaValidateBeforeCall(id, antiguaContrasena, nuevaContrasena, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Cambiar contraseña de usuarios (asynchronously)
     * Cambiar contraseña a un usuario
     * @param id  (required)
     * @param antiguaContrasena  (required)
     * @param nuevaContrasena  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cambiarContrasenaAsync(Long id, String antiguaContrasena, String nuevaContrasena, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = cambiarContrasenaValidateBeforeCall(id, antiguaContrasena, nuevaContrasena, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for consultarRegistros
     * @param id  (required)
     * @param fechaDesde  (required)
     * @param fechaHasta  (required)
     * @param filtro  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consultarRegistrosCall(Long id, LocalDate fechaDesde, LocalDate fechaHasta, String filtro, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/usuarios/consultarRegistros/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fechaDesde != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fechaDesde", fechaDesde));
        }

        if (fechaHasta != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fechaHasta", fechaHasta));
        }

        if (filtro != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filtro", filtro));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call consultarRegistrosValidateBeforeCall(Long id, LocalDate fechaDesde, LocalDate fechaHasta, String filtro, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling consultarRegistros(Async)");
        }

        // verify the required parameter 'fechaDesde' is set
        if (fechaDesde == null) {
            throw new ApiException("Missing the required parameter 'fechaDesde' when calling consultarRegistros(Async)");
        }

        // verify the required parameter 'fechaHasta' is set
        if (fechaHasta == null) {
            throw new ApiException("Missing the required parameter 'fechaHasta' when calling consultarRegistros(Async)");
        }

        // verify the required parameter 'filtro' is set
        if (filtro == null) {
            throw new ApiException("Missing the required parameter 'filtro' when calling consultarRegistros(Async)");
        }

        return consultarRegistrosCall(id, fechaDesde, fechaHasta, filtro, _callback);

    }

    /**
     * Consultar registros del usuario
     * Consultar registros del usuario
     * @param id  (required)
     * @param fechaDesde  (required)
     * @param fechaHasta  (required)
     * @param filtro  (required)
     * @return List&lt;RegistroPractica&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<RegistroPractica> consultarRegistros(Long id, LocalDate fechaDesde, LocalDate fechaHasta, String filtro) throws ApiException {
        ApiResponse<List<RegistroPractica>> localVarResp = consultarRegistrosWithHttpInfo(id, fechaDesde, fechaHasta, filtro);
        return localVarResp.getData();
    }

    /**
     * Consultar registros del usuario
     * Consultar registros del usuario
     * @param id  (required)
     * @param fechaDesde  (required)
     * @param fechaHasta  (required)
     * @param filtro  (required)
     * @return ApiResponse&lt;List&lt;RegistroPractica&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RegistroPractica>> consultarRegistrosWithHttpInfo(Long id, LocalDate fechaDesde, LocalDate fechaHasta, String filtro) throws ApiException {
        okhttp3.Call localVarCall = consultarRegistrosValidateBeforeCall(id, fechaDesde, fechaHasta, filtro, null);
        Type localVarReturnType = new TypeToken<List<RegistroPractica>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Consultar registros del usuario (asynchronously)
     * Consultar registros del usuario
     * @param id  (required)
     * @param fechaDesde  (required)
     * @param fechaHasta  (required)
     * @param filtro  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consultarRegistrosAsync(Long id, LocalDate fechaDesde, LocalDate fechaHasta, String filtro, final ApiCallback<List<RegistroPractica>> _callback) throws ApiException {

        okhttp3.Call localVarCall = consultarRegistrosValidateBeforeCall(id, fechaDesde, fechaHasta, filtro, _callback);
        Type localVarReturnType = new TypeToken<List<RegistroPractica>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for login
     * @param nombreUsuario  (required)
     * @param password  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loginCall(String nombreUsuario, String password, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/usuarios/login";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nombreUsuario != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nombreUsuario", nombreUsuario));
        }

        if (password != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("password", password));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call loginValidateBeforeCall(String nombreUsuario, String password, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'nombreUsuario' is set
        if (nombreUsuario == null) {
            throw new ApiException("Missing the required parameter 'nombreUsuario' when calling login(Async)");
        }

        // verify the required parameter 'password' is set
        if (password == null) {
            throw new ApiException("Missing the required parameter 'password' when calling login(Async)");
        }

        return loginCall(nombreUsuario, password, _callback);

    }

    /**
     * Loguea al usuario
     * Loguea al usuario
     * @param nombreUsuario  (required)
     * @param password  (required)
     * @return Usuario
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Usuario login(String nombreUsuario, String password) throws ApiException {
        ApiResponse<Usuario> localVarResp = loginWithHttpInfo(nombreUsuario, password);
        return localVarResp.getData();
    }

    /**
     * Loguea al usuario
     * Loguea al usuario
     * @param nombreUsuario  (required)
     * @param password  (required)
     * @return ApiResponse&lt;Usuario&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Usuario> loginWithHttpInfo(String nombreUsuario, String password) throws ApiException {
        okhttp3.Call localVarCall = loginValidateBeforeCall(nombreUsuario, password, null);
        Type localVarReturnType = new TypeToken<Usuario>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Loguea al usuario (asynchronously)
     * Loguea al usuario
     * @param nombreUsuario  (required)
     * @param password  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call loginAsync(String nombreUsuario, String password, final ApiCallback<Usuario> _callback) throws ApiException {

        okhttp3.Call localVarCall = loginValidateBeforeCall(nombreUsuario, password, _callback);
        Type localVarReturnType = new TypeToken<Usuario>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
